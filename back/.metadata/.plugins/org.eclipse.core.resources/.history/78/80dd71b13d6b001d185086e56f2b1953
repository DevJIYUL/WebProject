package com.home.service.user;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.home.mapper.UserMapper;
import com.home.util.SecurityUtil;
import com.home.vo.user.LoginDto;
import com.home.vo.user.SignupDto;
import com.home.vo.user.User;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

	@Autowired
	private final UserMapper userMapper;
	@Autowired
	private final PasswordEncoder passwordEncoder;

	@Override
	@Transactional
	public Boolean existsByUsername(String username) throws Exception {
		return userMapper.existsByUsername(username) > 0 ? Boolean.TRUE : Boolean.FALSE;
	}

	@Override
	@Transactional
	public Boolean existsByEmail(Map<String, String> email) throws Exception {
		return userMapper.existsByEmail(email) > 0 ? Boolean.TRUE : Boolean.FALSE;
	}

	@Override
	@Transactional
	public int save(SignupDto signupDto) throws Exception {
		User user = User.builder().username(signupDto.getUsername()).password(passwordEncoder.encode(signupDto.getPassword()))
				.email(signupDto.getEmail()).domain(signupDto.getDomain()).role("USER")
				.residence(signupDto.getResidence()).build();
		int x = userMapper.save(user);
		if (x == 1) { // Success
			List<String> key = new ArrayList<>();
			for (String iterable_element : signupDto.getFavoritecateDTOs()) {
				key.add(iterable_element);
			}
			System.out.println(key);
			Map<String, Object> k = new HashMap<>();
			k.put("username", signupDto.getUsername());
			k.put("favoritecateDTOs", key);
			System.out.println(k);
			int y = userMapper.registerCategory(k);
			return x;
		}
		return 0;
	}

	@Override
	public List<User> listUser() throws Exception {
		return userMapper.listUser();
	}

	@Override
	public User getUser(String username) throws Exception {
		// TODO Auto-generated method stub
		return userMapper.getUser(username);
	}

	@Override
	public int updateUser(User user) throws Exception {
		return userMapper.updateUser(user);
	}

	@Override
	public int findPassword(String username) throws Exception {
		return userMapper.findPassword(username);

	}

	// 현재 SecurityContext에 저장된 username 만 가져온다.
	@Transactional(readOnly = true)
	public Optional<User> getUserWithAuthority() {
		return SecurityUtil.getCurrentUsername().flatMap(userMapper::findOneByUsername);
	}
}
