package com.home.controller;

import java.math.BigInteger;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.home.service.apt.AptService;
import com.home.util.ParameterCheck;
import com.home.vo.apt.AptDto;
import com.home.vo.apt.DongDto;
import com.home.vo.apt.KeywordDto;
import com.home.vo.apt.SearchDto;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/apt/*")
@RequiredArgsConstructor
@CrossOrigin("*")
@Api(value = "Apartment Controller", description = "아파트 컨트롤러")
public class AptController {
	@Autowired
	private final AptService aptService;
	
	@GetMapping("/sido")
	@ApiOperation(value = "sidoList", notes = "도, 시 리스트 뽑기")
	@ApiResponses({
		@ApiResponse(code = 200, message = "전국 도, 시 이름 조회 성공"),
		@ApiResponse(code = 204, message = "해당 데이터 없음"),
		@ApiResponse(code = 404, message = "페이지 오류"),
		@ApiResponse(code = 500, message = "서버 오류")
	})
	public ResponseEntity<List<DongDto>> sidoList() throws Exception{
		List<DongDto> list = aptService.selectAllSido();
		if (list != null && !list.isEmpty()) {
			return new ResponseEntity<List<DongDto>>(list, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
	
	@PostMapping("/gugun")
	@ApiOperation(value = "gugunList", notes = "도, 시 선택 시 구군 리스트 뽑기\nBody로 sidoName만 담은 DongDto 객체를 보내줍니다.")
	@ApiResponses({
		@ApiResponse(code = 200, message = "전국 구군 이름 조회 성공"),
		@ApiResponse(code = 204, message = "해당 데이터 없음"),
		@ApiResponse(code = 404, message = "페이지 오류"),
		@ApiResponse(code = 500, message = "서버 오류")
	})
	public ResponseEntity<List<DongDto>> gugunList(@RequestBody DongDto dongDto) throws Exception{
		List<DongDto> list = aptService.selectAllGugun(dongDto);
		if (list != null && !list.isEmpty()) {
			return new ResponseEntity<List<DongDto>>(list, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
	@PostMapping("/dong")
	@ApiOperation(value = "dongList", notes = "도.시 , 구.군 선택 시 동 리스트 뽑기\nBody에 sidoName, gugunName 담은 DongDto 객체에 담아서 보내줍니다.")
	@ApiResponses({
		@ApiResponse(code = 200, message = "전국 동 이름 조회 성공"),
		@ApiResponse(code = 204, message = "해당 데이터 없음"),
		@ApiResponse(code = 404, message = "페이지 오류"),
		@ApiResponse(code = 500, message = "서버 오류")
	})
	public ResponseEntity<List<DongDto>> dongList(@RequestBody DongDto dongDto) throws Exception{
		List<DongDto> list = aptService.selectAllDong(dongDto);
		if (list != null && !list.isEmpty()) {
			return new ResponseEntity<List<DongDto>>(list, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
	
	
	@GetMapping("/list/dong/{keyword}")
	@ApiOperation(value = "searchByDong", notes = "동별 아파트 매매 검색 - 동/년도/월 을 키워드로 검색\nURI=/apt/list/dong/{dongCode-year-month}\nexample) /apt/list/dong/1162010200-2018-8")
	@ApiResponses({
		@ApiResponse(code = 200, message = "동 기준 실거래가 조회 성공"),
		@ApiResponse(code = 204, message = "해당 데이터 없음"),
		@ApiResponse(code = 404, message = "페이지 오류"),
		@ApiResponse(code = 500, message = "서버 오류")
	})
	public ResponseEntity<List<SearchDto>> searchByDong(@PathVariable("keyword") String keyword) throws Exception {
		String[] temp = keyword.split("-");
		String dongCode = temp[0];
		String year = ParameterCheck.zeroToBlank(temp[1]);
		String month = ParameterCheck.zeroToBlank(temp[2]);
		KeywordDto keywordDto = KeywordDto.builder()
				.dongCode(dongCode)
				.year(year)
				.month(month)
				.build();
		List<SearchDto> list = aptService.searchByDong(keywordDto);
		if (list != null && !list.isEmpty()) {
			return new ResponseEntity<List<SearchDto>>(list, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
	
	@GetMapping("/list/apt/{aptName}")
	@ApiOperation(value = "searchByAptName", notes = "아파트 이름 기준 검색\nURI=/list/apt/aptName\n example) /apt/list/apt/광화문")
	@ApiResponses({
		@ApiResponse(code = 200, message = "아파트 이름 기준 실거래가 조회 성공"),
		@ApiResponse(code = 204, message = "해당 데이터 없음"),
		@ApiResponse(code = 404, message = "페이지 오류"),
		@ApiResponse(code = 500, message = "서버 오류")
	})
	public ResponseEntity<List<SearchDto>> searchByAptName(@PathVariable("aptName") String aptName) throws Exception {
		List<SearchDto> list = aptService.searchByAptName(aptName);
		System.out.println(list);
		if (list != null && !list.isEmpty()) {
			return new ResponseEntity<List<SearchDto>>(list, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
	
	@GetMapping("/list/info/{keyword}")
	@ApiOperation(value = "selectOneByAptCode", notes = "거래 번호와 아파트코드를 이용한 특정 아파트 상세보기\nURI=/list/info/aptCode-housedeal.no\n example) /apt/list/info/11620000000037-116201808000171")
	@ApiResponses({
		@ApiResponse(code = 200, message = "아파트 실거래 상세 보기 성공"),
		@ApiResponse(code = 204, message = "해당 데이터 없음"),
		@ApiResponse(code = 404, message = "페이지 오류"),
		@ApiResponse(code = 500, message = "서버 오류")
	})
	public ResponseEntity<SearchDto> selectOneByAptCode(@PathVariable("keyword") String keyword) throws Exception {
		String[] temp = keyword.split("-");
		String aptCode = ParameterCheck.zeroToBlank(temp[0]);
		String no = ParameterCheck.zeroToBlank(temp[1]);
		KeywordDto keywordDto = KeywordDto.builder()
				.aptCode(BigInteger.valueOf(Long.parseLong(aptCode)))
				.no(BigInteger.valueOf(Long.parseLong(no)))
				.build();
		SearchDto search = aptService.selectOneByAptCode(keywordDto);
		System.out.println(search);
		if (search != null) {
			return new ResponseEntity<SearchDto>(search, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
	
	@GetMapping("/info/{aptCode}")
	@ApiOperation(value = "selectLngLat", notes = "아파트 코드를 이용해 위도 경도 가져오기\nURI=/apt/info/aptCode\n example) /apt/info/11620000000037")
	@ApiResponses({
		@ApiResponse(code = 200, message = "아파트 위도 경도 가져오기"),
		@ApiResponse(code = 204, message = "해당 데이터 없음"),
		@ApiResponse(code = 404, message = "페이지 오류"),
		@ApiResponse(code = 500, message = "서버 오류")
	})
	public ResponseEntity<AptDto> selectLngLat(@PathVariable("aptCode") String aptCode) throws Exception {
		AptDto result = aptService.selectLngLat(aptCode);
		if (result!= null ) {
			return new ResponseEntity<AptDto>(result, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
}
