package com.home.config;

import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.home.filter.JwtFilter;
import com.home.security.jwt.JwtAccessDeniedHandler;
import com.home.security.jwt.JwtAuthenticationEntryPoint;
import com.home.security.jwt.TokenProvider;


@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true) // Method 단위로 @PreAuthorize 사용 가능하도록
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	private final TokenProvider tokenProvider;
	private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
	private final JwtAccessDeniedHandler jwtAccessDeniedHandler;

	public SecurityConfig(TokenProvider tokenProvider, JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint,
			JwtAccessDeniedHandler jwtAccessDeniedHandler) {
		this.jwtAccessDeniedHandler = jwtAccessDeniedHandler;
		this.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;
		this.tokenProvider = tokenProvider;
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers(HttpMethod.OPTIONS, "/**").antMatchers("/favicon.ico");

	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.cors().and().csrf().disable()
				// exceptionHandling 추가 -> response로 error 메세지 보내준다.
				// Vue 에서 401, 403 에러라면 JWT 관련 에러임 => RefreshToken요청을 하거나 한다.
				.exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)
				.accessDeniedHandler(jwtAccessDeniedHandler)

//			// SessionLess 설정
				.and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)

				// request 들에 대한 접근 제한을 설정하겠다
				.and().authorizeRequests()
				// 해당 uri는 허용
//			.antMatchers("/").permitAll()
				.antMatchers("/home/**").permitAll()
				.antMatchers("/api/**").permitAll()
				.antMatchers("/apt/**").permitAll()
				// 나머지는 인증 필요
				.anyRequest().authenticated()
				
				.and()
				// 추가 Configuration 적용 [ Filter 적용 정보가 담겨있다. ]
				.addFilterBefore(new JwtFilter(tokenProvider), UsernamePasswordAuthenticationFilter.class);
		
	}

}